
PushedInAsGivens.hs:10:31: error:
    • Could not deduce: a ~ a0
      from the context: F Int ~ [a]
        bound by the type signature for:
                   foo :: forall a. (F Int ~ [a]) => a -> Int
        at PushedInAsGivens.hs:9:13-44
      ‘a’ is a rigid type variable bound by
        the type signature for:
          foo :: forall a. (F Int ~ [a]) => a -> Int
        at PushedInAsGivens.hs:9:13-44
    • In the expression: y
      In the first argument of ‘length’, namely ‘[x, y]’
      In the expression: length [x, y]
    • Relevant bindings include
        x :: a (bound at PushedInAsGivens.hs:10:17)
        foo :: a -> Int (bound at PushedInAsGivens.hs:10:13)
        y :: a0 (bound at PushedInAsGivens.hs:9:5)
        bar :: a0 -> (a0, Int) (bound at PushedInAsGivens.hs:9:1)

PushedInAsGivens.hs:11:15: error:
    • Couldn't match type: F Int
                     with: [a]
        arising from a use of ‘foo’
      The type variable ‘a0’ is ambiguous
    • In the expression: foo y
      In the expression: (y, foo y)
      In the expression:
        let
          foo :: (F Int ~ [a]) => a -> Int
          foo x = length [...]
        in (y, foo y)
    • Relevant bindings include
        y :: a0 (bound at PushedInAsGivens.hs:9:5)
        bar :: a0 -> (a0, Int) (bound at PushedInAsGivens.hs:9:1)
